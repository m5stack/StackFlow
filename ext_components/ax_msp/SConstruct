# component2/SConscript
Import('env')
import os
with open(env['PROJECT_TOOL_S']) as f:
    exec(f.read())

if 'CONFIG_AX_620E_MSP_ENABLED' in os.environ:
    MSP_PATH = os.path.join(os.environ['GIT_REPO_PATH'], 'm5stack_msp')
    if 'MSP_PATH' in os.environ:
        MSP_PATH = os.environ['MSP_PATH']
    else:
        if not os.path.exists(MSP_PATH):
            zip_file = MSP_PATH + '.tar.gz'
            zip_file_extrpath = MSP_PATH + '_tmp'
            down_url = "https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/linux/llm/m5stack_msp.tar.gz"
            
            if 'CONFIG_REPO_AUTOMATION' in os.environ:
                down = 'y'
            else:
                down = input('{} does not exist. Please choose whether to download it automatically? Y/N :'.format('m5stack_msp.tar.gz'))
                down = down.lower()
            if down == 'y':
                # from git import Repo
                import requests
                import parse
                import tarfile
                import shutil
                try:
                    # Downloading via HTTP (more common)
                    if not os.path.exists(zip_file):
                        response = requests.get(down_url)
                        if response.status_code == 200:
                            with open(zip_file, 'wb') as file:
                                file.write(response.content)
                        else:
                            env.Fatal("{} down failed".format(down_url))
                    with tarfile.open(zip_file, 'r:gz') as tar:
                        tar.extractall(path=zip_file_extrpath)
                    shutil.move(zip_file_extrpath, MSP_PATH)
                    # shutil.rmtree(zip_file_extrpath)
                    print("The {} download successful.".format(down_url))
                except Exception as e:
                    print('Please manually download {} to {} .'.format(down_url, zip_file))
                    env.Fatal("Cloning failed.: {}".format(e))
            else:
                env.Fatal('Please manually download {} to {} .'.format(down_url, zip_file))
    SRCS=[]
    INCLUDE=[]
    PRIVATE_INCLUDE=[]
    REQUIREMENTS=[]
    STATIC_LIB=[]
    DYNAMIC_LIB=[]
    DEFINITIONS=[]
    DEFINITIONS_PRIVATE=['']
    LDFLAGS=[]
    LINK_SEARCH_PATH=[]
    
    INCLUDE += [os.path.join(MSP_PATH, 'out/arm64_glibc/include'), os.path.join(MSP_PATH, 'sample/common')]
    LINK_SEARCH_PATH += [os.path.join(MSP_PATH, 'out/arm64_glibc/lib')]
    REQUIREMENTS += ['dl', 'm', 'pthread']
    
    # REQUIREMENTS += ['ax_sys', 'ax_mipi', 'ax_proton', 'ax_engine','ax_interpreter','ax_ae','ax_awb','ax_af',
    #                 'ax_nt_stream', 'ax_venc', 'ax_ivps', 'ax_vdec', 'ax_nt_stream', 'ax_nt_ctrl', 'ax_ive', 'ax_audio', 'ax_opal', 'ax_fdk',
    #                 'ax_ives', 'ax_skel', 'ax_audio_3a', 'ax_opus', 'ax_opal', 'ax_audio']

    third_party = ['cmdline','drm','faac','fdk-aac','ffmpeg','libsamplerate','live','mp4','opencv','openssl','optee','opus','swupdate','tinyalsa']
    for dirn in third_party:
        INCLUDE.append(os.path.join(MSP_PATH,'third-party',dirn,'include'))
        LINK_SEARCH_PATH.append(os.path.join(MSP_PATH,'third-party',dirn,'lib/arm64/glibc'))

    LINK_SEARCH_PATH.append(os.path.join(MSP_PATH,'app/lib'))

    env['COMPONENTS'].append({'target':os.path.basename(env['component_dir']),
                            'SRCS':SRCS,
                            'INCLUDE':INCLUDE,
                            'PRIVATE_INCLUDE':PRIVATE_INCLUDE,
                            'REQUIREMENTS':REQUIREMENTS,
                            'STATIC_LIB':STATIC_LIB,
                            'DYNAMIC_LIB':DYNAMIC_LIB,
                            'DEFINITIONS':DEFINITIONS,
                            'DEFINITIONS_PRIVATE':DEFINITIONS_PRIVATE,
                            'LDFLAGS':LDFLAGS,
                            'LINK_SEARCH_PATH':LINK_SEARCH_PATH,
                            'REGISTER':'static'
                            })

