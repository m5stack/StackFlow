from pathlib import Path
import os
import shutil

os.environ['SDK_PATH'] = os.path.normpath(str(Path(os.getcwd())/'..'/'..'/'SDK'))
os.environ['EXT_COMPONENTS_PATH'] = os.path.normpath(str(Path(os.getcwd())/'..'/'..'/'ext_components'))

version = 'v0.0.5'
static_lib = 'static_lib'
update = False
if not os.path.exists(static_lib):
    update = True
else:
    try:
        with open(str(Path(static_lib)/'version'), 'r') as f:
            if f.read() != version:
                update = True
    except:
        update = True

if update:
    zip_file = static_lib + '_{}.tar.gz'.format(version)
    zip_file_extrpath = static_lib + '_tmp'
    down_url = "https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/linux/llm/static_lib_{}.tar.gz".format(version)
    
    if 'CONFIG_REPO_AUTOMATION' in os.environ:
        down = 'y'
    else:
        down = input('{} does not exist. Please choose whether to download it automatically? Y/N :'.format('static_lib_{}.tar.gz').format(version))
        down = down.lower()
    if down == 'y':
        # from git import Repo
        import requests
        import parse
        import tarfile
        import shutil
        try:
            # Downloading via HTTP (more common)
            if not os.path.exists(zip_file):
                response = requests.get(down_url)
                if response.status_code == 200:
                    with open(zip_file, 'wb') as file:
                        file.write(response.content)
                else:
                    print("{} down failed".format(down_url))
            try:
                shutil.rmtree(static_lib)
            except:
                pass
            with tarfile.open(zip_file, 'r:gz') as tar:
                tar.extractall(path=zip_file_extrpath)
            shutil.move(zip_file_extrpath, static_lib)
            try:
                os.remove(zip_file)
            except:
                pass
            print("The {} download successful.".format(down_url))
        except Exception as e:
            print('Please manually download {} to {} .'.format(down_url, zip_file))
            print("Cloning failed.: {}".format(e))
    else:
        print('Please manually download {} to {} .'.format(down_url, zip_file))


with open(str(Path(os.getcwd())/'..'/'..'/'SDK'/'tools'/'scons'/'project.py')) as f:
    exec(f.read())
